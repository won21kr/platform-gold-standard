.container
  = render 'layouts/sidenav'
  .row
    .index-banner.section.no-pad-bot
  .row
    .col.m12.l10.push-l2{:style => "margin-top: 25px;"}
      %h3.thin{:style => "margin-top: 35px; font-size: 28px; letter-spacing: 1.5px; text-color: #002557;"}
        %i.material-icons.prefix{:style => "font-size: 28px;"} equalizer
        Box Events
      %h6.caption.thin{:style => "font-size: 16px;"}
        Track both admin and user events
      -# informational overlays
      .help-icon.btn.hide_mobile{"data-toggle" => "chardinjs", :id => "opentour", :onclick => "chardinToggle()", :style => "padding: none; font-color: #fff !important;"}
        %i.material-icons.prefix{:style => "font-size: 18px; color: #222222;"} info_outline
        %span{:style => "color: #222222; position: relative; top: -4px; left: 0px; text-transform: lowercase; font-size: 12px;"}
          info

      .col.s12{:style => "margin-top: 30px"}
      .col.s6
        %ul.tabs{:style => "background-color: transparent; width: 80% !important;"}
          %li.tab.active{:style => "font-size: 12px !important;"}
            %a{:href => "#admin"}
              Admin
          %li.tab{:style => "font-size: 12px !important;"}
            %a{:href => "#user"}
              User

      -# TABS
      .col.s12#admin{:style => "margin-top: 30px"}
        .col.s12
          %h6{:style => "margin-bottom: 30px"}
            Enterprise Events
          %table.highlight#adminEvents
            %thead{"data-intro" => "Realtime log of events occuring in the Box enterprise", "data-position" => "top"}
              %tr
                %th{"data-field" => "name"} Type
                %th{"data-field" => "modified"} Recorded At
                %th{"data-field" => "id"} User Name
                %th{"data-field" => "id"} IP Address
            - @enterprise_events.each_with_index do |event, i|
              %tr{"data-intro" => i == 0 ? "Unique Box admin event" : nil, "data-position" => i == 0 ? "left" : nil}
                %td
                  .name_elipses
                    = event.event_type
                %td
                  .name_elipses
                    = DateTime.strptime(event.created_at).strftime("%B %d, %Y %l:%M %p")
                %td
                  .name_elipses
                    = event.created_by.name
                %td
                  .name_elipses
                    = event.ip_address

      .col.s12#user{:style => "margin-top: 30px"}
        .col.s12
          %h6{:style => "margin-bottom: 30px"}
            = "User Events - " + session[:userinfo]['info']['name']
          %table.highlight#userEvents
            %thead{"data-intro" => "Realtime log of events for the signed in Box App User", "data-position" => "top"}
              %tr
                %th{"data-field" => "name"} Type
                %th{"data-field" => "modified"} Recorded At
                %th{"data-field" => "id"} Item Name
                -# %th{"data-field" => "id"} User
            - @user_events.each_with_index do |event, i|
              %tr{"data-intro" => i == 0 ? "Unique Box user event for #{session[:userinfo]['info']['name']}" : nil, "data-position" => i == 0 ? "left" : nil}
                %td
                  = event.event_type
                %td
                  = DateTime.strptime(event.recorded_at).strftime("%B %d, %Y %l:%M %p")
                %td
                  .name_elipses
                    = event.source.name
                -# %td
                -#   = event.created_by.name

:javascript

  function chardinToggle() {
    $('body').chardinJs('toggle');
  }


  var initPosition = "#{@user_stream_pos}";
  var entPosition = "#{@enterprise_stream_pos}";

  setTimeout(userEvent(initPosition, []), 3000);
  setTimeout(enterpriseEvent(entPosition, []), 3000);

  function userEvent(streamPos, eventIds) {

    // The Box OAuth 2 Header. Add your access token.
    var headers = { Authorization: 'Bearer #{@user_access_token}'};
    var eventsUrl = 'https://api.box.com/2.0/events?stream_position=' + streamPos;

    $.ajax({
      url: eventsUrl,
      headers: headers,
      crossDomain: true,
      type: 'GET',
      // This prevents JQuery from trying to append the form as a querystring
      processData: false,
      contentType: false,
    }).complete(function ( data ) {

      var obj = $.parseJSON(data.responseText);
      events = obj.entries

      // loop through all events
      for (i = 0; i < events.length; i++) {

        if (eventIds.indexOf(events[i].event_id) > -1) {
          // event already processed
        } else {
          // event not yet processed
          newEvent = $("<tr><td>" + events[i].event_type +
                       "</td><td>" + moment(events[i].recorded_at).format("MMMM D, YYYY h:mm A") +
                       "</td><td>" + events[i].source.name + "</td></tr>").hide();
          $("#userEvents").prepend(newEvent);
          newEvent.fadeIn();
          eventIds.push(events[i].event_id);
        }
      }

      setTimeout(function() {userEvent(obj.next_stream_position, eventIds);}, 3000);
    });
  }

  function enterpriseEvent(streamPos, eventIds) {

    // The Box OAuth 2 Header. Add your access token.
    var headers = { Authorization: 'Bearer #{@ent_access_token}'};
    var eventsUrl = 'https://api.box.com/2.0/events?stream_type=admin_logs&stream_position=' + streamPos;

    $.ajax({
      url: eventsUrl,
      headers: headers,
      crossDomain: true,
      type: 'GET',
      // This prevents JQuery from trying to append the form as a querystring
      processData: false,
      contentType: false,
    }).complete(function ( data ) {

      var obj = $.parseJSON(data.responseText);
      events = obj.entries
      // console.log(obj);

      // loop through all events
      for (i = 0; i < events.length; i++) {

        if (eventIds.indexOf(events[i].event_id) > -1) {
          // event already processed
        } else {
          // event not yet processed
          // var name;
          // if (events[i].source.name == null) {
          //   name = events[i].source.item_name;
          // } else {
          //   name = events[i].source.name;
          // }
          newEvent = $("<tr><td>" + events[i].event_type +
                       "</td><td>" + moment(events[i].recorded_at).format("MMMM D, YYYY h:mm A") +
                       "</td><td>" + events[i].created_by.name +
                       "</td><td>" + events[i].ip_address + "</td></tr>").hide();
          $("#adminEvents").prepend(newEvent);
          newEvent.fadeIn();
          eventIds.push(events[i].event_id);
        }
      }

      setTimeout(function() {enterpriseEvent(obj.next_stream_position, eventIds);}, 3000);
    });
  }
